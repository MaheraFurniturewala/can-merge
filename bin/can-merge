#!/usr/bin/env node

'use strict';

const Yargs = require('yargs');
const chalk = require('chalk');
require('dotenv').config();
const getRepo = require('../utils/getRepo');
const getSHA = require('../utils/getSHA');

const runQuery = require('../utils/runQuery');
const evaluatePullRequest = require('../utils/evaluatePullRequest');
const evaluateChecks = require('../utils/evaluateChecks');
const parsePullRequest = require('../utils/parsePullRequest');
const pullRequestStatus = require('../utils/models/pullRequestStatus');
const getMessage = require('../utils/getMessage');

const {
	GITHUB_TOKEN,
	GH_TOKEN,
	NODE_ENV,
} = process.env;

const ORIGIN = Object('origin');

const defaultRepo = getRepo();
const REPO = defaultRepo && Object(defaultRepo);

const args = Yargs
	.usage('Usage: can-merge -p <pr> [-r <repo>]')
	.help()
	.strict()
	.options({
		pr: {
			alias: 'p',
			demandOption: false,
			describe: 'pull request',
			type: 'string',
		},
		remote: {
			default: ORIGIN,
			demandOption: false,
			describe: 'remote name',
			type: 'string',
		},
		repo: {
			alias: 'r',
			default: REPO,
			demandOption: !REPO,
			describe: 'repository',
			type: 'string',
		},
		sha: {
			alias: 's',
			default: getSHA(true),
			describe: 'commit SHA',
			type: 'string',
		},
		token: {
			alias: 't',
			demandOption: !(GITHUB_TOKEN || GH_TOKEN),
			describe: 'github access token',
			type: 'string',
		},
	})
	.check((argv) => {
		if (argv.repo !== REPO && argv.remote !== ORIGIN) {
			throw chalk.red('`--repo` and `--remote` are mutually exclusive');
		}
		return true;
	})
	.middleware((argv) => {
		if (argv.repo === REPO && argv.remote) {
			// repo is default, remote is provided
			return {
				...argv,
				...argv.remote && { repo: getRepo(argv.remote) },
			};
		}
		return argv;
	})
	.check((argv) => {
		if (!argv.repo) {
			if (argv.remote !== ORIGIN) {
				throw chalk.red(`Could not find remote git repo with remote name \`${argv.remote}\``);
			}
			throw chalk.red('Could not infer any git repository from directory.\nAre you sure you are in a git repository? Otherwise, please specify `--repo=`');
		}

		return true;
	})
	.parse();

const token = args.token || GITHUB_TOKEN || GH_TOKEN;

runQuery(args.pr, String(args.repo), args.sha, token).then((response) => {
	if (NODE_ENV === 'DEBUG') {
		console.log(JSON.stringify(response, null, 2));
	}
	const prs = parsePullRequest(response.repository);
	if (prs.length === 0) {
		console.info(chalk.redBright(`âš  This remote repository does not contain any pull requests matching sha: ${args.sha}`));
		process.exitCode = 1;
	} else {
		prs.forEach((pr) => {
			const status = evaluatePullRequest(pr);
			console.info('PR:', pr.number, getMessage(status));
			if (status !== pullRequestStatus.MERGEABLE) {
				process.exitCode = (process.exitCode ?? 0) + 1;
			}
			if (status === pullRequestStatus.STATUS_FAILURE || status === pullRequestStatus.STATUS_PENDING) {
				const { failure, pending } = evaluateChecks(pr);

				if (pending.length > 0) {
					console.info(chalk.yellowBright(`Pending Checks (${pending.length}): ${pending.join(', ')}`));
				}
				if (failure.length > 0) {
					console.info(chalk.redBright(`Failed Checks (${failure.length}): ${failure.join(', ')}`));
				}
			}
		});
	}
});

